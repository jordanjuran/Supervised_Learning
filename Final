{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "source": "Peer Review #4: BBC News Classification Kaggle Mini Project",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "#Import Packages\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport sklearn\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_selection import chi2\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.decomposition import TruncatedSVD, NMF\nfrom sklearn.cluster import KMeans\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom IPython.display import display\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "#Import Data Files\ndf_Test = pd.read_csv('BBC News Test.csv')\ndf_Test.head()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 7,
      "outputs": [
        {
          "execution_count": 7,
          "output_type": "execute_result",
          "data": {
            "text/plain": "   ArticleId                                               Text\n0       1018  qpr keeper day heads for preston queens park r...\n1       1319  software watching while you work software that...\n2       1138  d arcy injury adds to ireland woe gordon d arc...\n3        459  india s reliance family feud heats up the ongo...\n4       1020  boro suffer morrison injury blow middlesbrough...",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ArticleId</th>\n      <th>Text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1018</td>\n      <td>qpr keeper day heads for preston queens park r...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1319</td>\n      <td>software watching while you work software that...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1138</td>\n      <td>d arcy injury adds to ireland woe gordon d arc...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>459</td>\n      <td>india s reliance family feud heats up the ongo...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1020</td>\n      <td>boro suffer morrison injury blow middlesbrough...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "df_Train = pd.read_csv('BBC News Train.csv')\ndf_Train.head()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 8,
      "outputs": [
        {
          "execution_count": 8,
          "output_type": "execute_result",
          "data": {
            "text/plain": "   ArticleId                                               Text  Category\n0       1833  worldcom ex-boss launches defence lawyers defe...  business\n1        154  german business confidence slides german busin...  business\n2       1101  bbc poll indicates economic gloom citizens in ...  business\n3       1976  lifestyle  governs mobile choice  faster  bett...      tech\n4        917  enron bosses in $168m payout eighteen former e...  business",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ArticleId</th>\n      <th>Text</th>\n      <th>Category</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1833</td>\n      <td>worldcom ex-boss launches defence lawyers defe...</td>\n      <td>business</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>154</td>\n      <td>german business confidence slides german busin...</td>\n      <td>business</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1101</td>\n      <td>bbc poll indicates economic gloom citizens in ...</td>\n      <td>business</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1976</td>\n      <td>lifestyle  governs mobile choice  faster  bett...</td>\n      <td>tech</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>917</td>\n      <td>enron bosses in $168m payout eighteen former e...</td>\n      <td>business</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "sample_solution_data = pd.read_csv('BBC News Sample Solution.csv')\nsample_solution_data.head()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 37,
      "outputs": [
        {
          "execution_count": 37,
          "output_type": "execute_result",
          "data": {
            "text/plain": "   ArticleId       Category\n0       1018          sport\n1       1319           tech\n2       1138       business\n3        459  entertainment\n4       1020       politics",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ArticleId</th>\n      <th>Category</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1018</td>\n      <td>sport</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1319</td>\n      <td>tech</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1138</td>\n      <td>business</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>459</td>\n      <td>entertainment</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1020</td>\n      <td>politics</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# Check the unique labels \nuniq_cat = sample_solution_data['Category'].unique()\nprint(uniq_cat)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 38,
      "outputs": [
        {
          "name": "stdout",
          "text": "['sport' 'tech' 'business' 'entertainment' 'politics']\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#Data Exploration\ndf_Train.sample(5)\n    #1490 rows, cols = ['AtricleID', 'Text', 'Category]",
      "metadata": {
        "trusted": true
      },
      "execution_count": 10,
      "outputs": [
        {
          "execution_count": 10,
          "output_type": "execute_result",
          "data": {
            "text/plain": "      ArticleId                                               Text  Category\n463        1688  immigration to be election issue immigration a...  politics\n1187       1818  baron kinnock makes lords debut former labour ...  politics\n1272        960  optimism remains over uk housing the uk proper...  business\n975         709  lloyd s of london head chides fsa the head of ...  business\n20         1547  hewitt overcomes wobble in sydney lleyton hewi...     sport",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ArticleId</th>\n      <th>Text</th>\n      <th>Category</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>463</th>\n      <td>1688</td>\n      <td>immigration to be election issue immigration a...</td>\n      <td>politics</td>\n    </tr>\n    <tr>\n      <th>1187</th>\n      <td>1818</td>\n      <td>baron kinnock makes lords debut former labour ...</td>\n      <td>politics</td>\n    </tr>\n    <tr>\n      <th>1272</th>\n      <td>960</td>\n      <td>optimism remains over uk housing the uk proper...</td>\n      <td>business</td>\n    </tr>\n    <tr>\n      <th>975</th>\n      <td>709</td>\n      <td>lloyd s of london head chides fsa the head of ...</td>\n      <td>business</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>1547</td>\n      <td>hewitt overcomes wobble in sydney lleyton hewi...</td>\n      <td>sport</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "df_Train.info()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 11,
      "outputs": [
        {
          "name": "stdout",
          "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1490 entries, 0 to 1489\nData columns (total 3 columns):\n #   Column     Non-Null Count  Dtype \n---  ------     --------------  ----- \n 0   ArticleId  1490 non-null   int64 \n 1   Text       1490 non-null   object\n 2   Category   1490 non-null   object\ndtypes: int64(1), object(2)\nmemory usage: 23.4+ KB\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "df_Test.sample(5)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 12,
      "outputs": [
        {
          "execution_count": 12,
          "output_type": "execute_result",
          "data": {
            "text/plain": "     ArticleId                                               Text\n372        925  india opens skies to competition india will al...\n392        525  disney backs sony dvd technology a next genera...\n217        545  bening makes awards breakthrough film actress ...\n684        599  teenagers to be allowed to be mps teenagers wi...\n64         369  emi shares hit by profit warning shares in mus...",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ArticleId</th>\n      <th>Text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>372</th>\n      <td>925</td>\n      <td>india opens skies to competition india will al...</td>\n    </tr>\n    <tr>\n      <th>392</th>\n      <td>525</td>\n      <td>disney backs sony dvd technology a next genera...</td>\n    </tr>\n    <tr>\n      <th>217</th>\n      <td>545</td>\n      <td>bening makes awards breakthrough film actress ...</td>\n    </tr>\n    <tr>\n      <th>684</th>\n      <td>599</td>\n      <td>teenagers to be allowed to be mps teenagers wi...</td>\n    </tr>\n    <tr>\n      <th>64</th>\n      <td>369</td>\n      <td>emi shares hit by profit warning shares in mus...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "df_Test.info()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 13,
      "outputs": [
        {
          "name": "stdout",
          "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 735 entries, 0 to 734\nData columns (total 2 columns):\n #   Column     Non-Null Count  Dtype \n---  ------     --------------  ----- \n 0   ArticleId  735 non-null    int64 \n 1   Text       735 non-null    object\ndtypes: int64(1), object(1)\nmemory usage: 8.7+ KB\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# we already know that both datasets have no null values from Non-Null counts\n# so now we examine the datasets for empty strings\n\nemp_str_train = np.where(df_Train.applymap(lambda x: x == ''))\nprint('emp_str_train: ', emp_str_train)\n\nemp_str_test = np.where(df_Test.applymap(lambda x: x == ''))\nprint('emp_str_test: ', emp_str_test)\n\n# There isn't null value or empty string in the df",
      "metadata": {
        "trusted": true
      },
      "execution_count": 20,
      "outputs": [
        {
          "name": "stdout",
          "text": "emp_str_train:  (array([], dtype=int32), array([], dtype=int32))\nemp_str_test:  (array([], dtype=int32), array([], dtype=int32))\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# Visualize the amount of articles in each category\n#import seaborn as sns\narticle_count = df_Train.groupby('Category').size()\nprint(article_count)\n\n#sns.barplot(article_count, x=article_count.index, y=article_count)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 25,
      "outputs": [
        {
          "name": "stdout",
          "text": "Category\nbusiness         336\nentertainment    273\npolitics         274\nsport            346\ntech             261\ndtype: int64\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# check the amount of word in each article \n\nword_count = df_Train['Text'].str.len()\nprint(word_count)\n\n#sns.histplot(word_count, kde=True)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 27,
      "outputs": [
        {
          "name": "stdout",
          "text": "0       1866\n1       2016\n2       3104\n3       3618\n4       2190\n        ... \n1485    1266\n1486    3111\n1487    1370\n1488    3242\n1489    1723\nName: Text, Length: 1490, dtype: int64\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# slightly positively skewed...need to dig in a little more\n\nprint('median word count: ', word_count.median())\nprint('mean word count: ', word_count.mean())\n\nlt1 = sum(word_count > 7500)\nprint('word count larger than 7500: ', lt1)\n\nlt2 = sum(word_count > 10000)\nprint('word count larger than 10000: ', lt2)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 29,
      "outputs": [
        {
          "name": "stdout",
          "text": "median word count:  1961.0\nmean word count:  2233.461744966443\nword count larger than 7500:  8\nword count larger than 10000:  3\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# exclude the articles to clearly define weight for each word\n\ntrain_data = df_Train[df_Train['Text'].str.len() <= 7500]\nprint(train_data.info())",
      "metadata": {
        "trusted": true
      },
      "execution_count": 30,
      "outputs": [
        {
          "name": "stdout",
          "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1482 entries, 0 to 1489\nData columns (total 3 columns):\n #   Column     Non-Null Count  Dtype \n---  ------     --------------  ----- \n 0   ArticleId  1482 non-null   int64 \n 1   Text       1482 non-null   object\n 2   Category   1482 non-null   object\ndtypes: int64(1), object(2)\nmemory usage: 34.7+ KB\nNone\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# Final cleaning steps before tokenizing words\n\nurl = np.where(train_data.applymap(lambda x: x == 'https'))\nprint('url: ', url)\nemail = np.where(train_data.applymap(lambda x: x == '@'))\nprint('email: ', email)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 31,
      "outputs": [
        {
          "name": "stdout",
          "text": "url:  (array([], dtype=int32), array([], dtype=int32))\nemail:  (array([], dtype=int32), array([], dtype=int32))\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# Parameters\ntfidf = TfidfVectorizer(sublinear_tf=True, stop_words='english', ngram_range=(1, 2),\n                        min_df=5, norm='l2', encoding='latin-1', lowercase=True)\n\ntrain_features = tfidf.fit_transform(train_data['Text']).toarray()\ntest_features = tfidf.transform(df_Test['Text']).toarray()\nprint(train_features.shape)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 33,
      "outputs": [
        {
          "name": "stdout",
          "text": "(1482, 9742)\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# now we can check the most correlated terms to each categorie using chi-squared test\n\ncat_id_df = pd.DataFrame(zip(uniq_cat, list(range(5))), columns=['Category', 'cat_id'])\ncat2id = dict(cat_id_df.values)\nid2cat = dict(cat_id_df[['cat_id', 'Category']].values)\ntrain_data = train_data.merge(cat_id_df, on='Category', how='left')\n\ntrue_labels = train_data.cat_id\n\ntrain_data.head()\ncat_id_df\n\nfor cat, cat_id in sorted(cat2id.items()):\n    chi2_train_features = chi2(train_features, true_labels==cat_id)\n    idx = np.argsort(chi2_train_features[0])\n    train_f_names = np.array(tfidf.get_feature_names_out())[idx]\n    top_f = train_f_names[-10:]\n    print(cat, top_f)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 39,
      "outputs": [
        {
          "name": "stdout",
          "text": "business ['stock' 'prices' 'market' 'profits' 'economic' 'economy' 'oil' 'growth'\n 'bank' 'shares']\nentertainment ['festival' 'actress' 'award' 'oscar' 'awards' 'album' 'band' 'singer'\n 'actor' 'film']\npolitics ['minister' 'tony blair' 'secretary' 'tory' 'tories' 'mr blair' 'party'\n 'blair' 'election' 'labour']\nsport ['arsenal' 'champion' 'win' 'game' 'chelsea' 'season' 'injury' 'match'\n 'coach' 'cup']\ntech ['pc' 'online' 'mobile' 'digital' 'web' 'microsoft' 'computer'\n 'technology' 'software' 'users']\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "tsne_features = TSNE().fit_transform(train_features)\n#plt.scatter(train_features)\n#sns.scatterplot(x=tsne_features[:,0], y=tsne_features[:,1], hue=true_labels, palette='deep').set(title='tSNE reduced features')#",
      "metadata": {
        "trusted": true
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "#Unsupervised Modeling\ndef mapping(predictions, true_labels):\n    labmap = {}\n    for pred, lab in zip(predictions, true_labels):\n        labmap[pred] = lab\n    mapped = [labmap[x] for x in predictions]\n    return mapped\n\n# kmeans clustering with svd\nsvd = TruncatedSVD(n_components=5, random_state=0)\ntrain_features_svd = svd.fit_transform(train_features)\ntest_features_svd = svd.transform(test_features) # submit for accuracy\n\nkmeans_svd = KMeans(n_clusters=5, n_init=10, random_state=0)\nkmeans_svd.fit(train_features_svd)\ntrain_pred_svd = kmeans_svd.labels_\n\ntrain_acc_svd = accuracy_score(true_labels, mapping(train_pred_svd, true_labels))\nprint(\"SVD train accuracy:\", train_acc_svd)\n\n# kmeans with nmf\nnmf = NMF(n_components=5, random_state=0)\ntrain_features_nmf = nmf.fit_transform(train_features)\ntest_features_nmf = nmf.transform(test_features) # submit for accuracy\n\nkmeans_nmf = KMeans(n_clusters=5, n_init=10, random_state=0)\nkmeans_nmf.fit(train_features_nmf)\ntrain_pred_nmf = kmeans_nmf.labels_\n\ntrain_acc_nmf = accuracy_score(true_labels, mapping(train_pred_nmf, true_labels))\nprint('NMF train accuracy:', train_acc_nmf)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 45,
      "outputs": [
        {
          "name": "stdout",
          "text": "SVD train accuracy: 0.9460188933873145\nNMF train accuracy: 0.9075573549257759\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# submit test predictions to kaggle competetion to get accuracy on test data\ntest_pred_svd = kmeans_svd.predict(test_features_svd)\ntest_pred_nmf = kmeans_nmf.predict(test_features_nmf)\n\nkmeans_lab2cat_svd = {0: 'sport', 1: 'entertainment', 2: 'tech', 3: 'politics', 4: 'business'}\ntest_pred_cat_svd = [kmeans_lab2cat_svd[lab] for lab in test_pred_svd]\nkmeans_lab2cat_nmf = {0: 'sport', 1: 'business', 2: 'politics', 3: 'tech', 4: 'entertainment'}\ntest_pred_cat_nmf = [kmeans_lab2cat_nmf[lab] for lab in test_pred_nmf]\n\nsvd_df = pd.DataFrame({'ArticleId': df_Test['ArticleId'], 'Category': test_pred_cat_svd})\nsvd_df.to_csv('svd.csv', index=False)\n\n#SVD and NMF yielded accuracy of 0.9551 and 0.91292",
      "metadata": {
        "trusted": true
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "# let's also have a look at the confusion matrix of the train data\n\n#import seaborn as sns\nsvd_conf_mtx = confusion_matrix(train_data['Category'], [kmeans_lab2cat_svd[lab] for lab in train_pred_svd])\n#sns.heatmap(svd_conf_mtx, xticklabels=cat_id_df.Category.values, yticklabels=cat_id_df.Category.values,\n          # annot=True, fmt='d', cmap='Blues')\nplt.xlabel('SVD Pred')\nplt.ylabel('True')",
      "metadata": {
        "trusted": true
      },
      "execution_count": 61,
      "outputs": [
        {
          "execution_count": 61,
          "output_type": "execute_result",
          "data": {
            "text/plain": "Text(0, 0.5, 'True')"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "nmf_conf_mtx = confusion_matrix(train_data['Category'], [kmeans_lab2cat_nmf[lab] for lab in train_pred_nmf])\n#sns.heatmap(nmf_conf_mtx, xticklabels=cat_id_df.Category.values, yticklabels=cat_id_df.Category.values,\n            #annot=True, fmt='d', cmap='Greens')\nplt.xlabel('NMF Pred')\nplt.ylabel('True')",
      "metadata": {
        "trusted": true
      },
      "execution_count": 62,
      "outputs": [
        {
          "execution_count": 62,
          "output_type": "execute_result",
          "data": {
            "text/plain": "Text(0, 0.5, 'True')"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "data = {\n    'n_components': [2, 5, 7, 10],\n    'svd_acc': [0.548, 0.947, 0.938, 0.939],\n    'nmf_acc': [0.476, 0.908, 0.764, 0.642]\n}\ndf = pd.DataFrame(data)\nprint(df)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 63,
      "outputs": [
        {
          "name": "stdout",
          "text": "   n_components  svd_acc  nmf_acc\n0             2    0.548    0.476\n1             5    0.947    0.908\n2             7    0.938    0.764\n3            10    0.939    0.642\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Supervised Model Training and Evaluation",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# as we determined previously, SVD seems work better than NMF with this particular dataset\n# we will only use logstic regression with svd\nlogreg = LogisticRegression()\nlogreg.fit(train_features_svd, train_data['Category'])\ntrain_pred = logreg.predict(train_features_svd)\ntest_pred = logreg.predict(test_features_svd) # submit to get acc\n\nlogreg_acc_train = accuracy_score(train_data['Category'], train_pred)\nprint('Accuracy using logistic regression:', logreg_acc_train)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 64,
      "outputs": [
        {
          "name": "stdout",
          "text": "Accuracy using logistic regression: 0.956140350877193\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# reduce the training dataset to 50% \nx, y, x_true, y_true = train_test_split(train_features, true_labels, train_size=0.5, test_size=0.2, random_state=0)\n\nsvd = TruncatedSVD(n_components=5)\nx_svd = svd.fit_transform(x)\ny_svd = svd.fit_transform(y)\n\n# Kmeans\nkmeans = KMeans(n_clusters=5, n_init=10, random_state=0)\nkmeans.fit(x_svd)\nx_pred_kmeans = kmeans.labels_\ny_pred_kmeans = kmeans.predict(y_svd)\n\n# LogReg\nlogreg = LogisticRegression()\nlogreg.fit(x_svd, x_true)\nx_pred_logreg = logreg.predict(x_svd)\ny_pred_logreg = logreg.predict(y_svd)\n\n# test accuracy \nx_acc_kmeans = accuracy_score(x_true, mapping(x_true, x_pred_kmeans))\ny_acc_kmeans = accuracy_score(y_true, mapping(y_true, y_pred_kmeans))\nprint('x_acc_kmeans:', x_acc_kmeans)\nprint('y_acc_kmeans:', y_acc_kmeans)\n\nx_acc_lr = accuracy_score(x_true, x_pred_logreg)\ny_acc_lr = accuracy_score(x_true, x_pred_logreg)\nprint('x_acc_lr: ', x_acc_lr)\nprint('y_acc_lr:', y_acc_lr)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 65,
      "outputs": [
        {
          "name": "stdout",
          "text": "x_acc_kmeans: 0.23751686909581646\ny_acc_kmeans: 0.6195286195286195\nx_acc_lr:  0.941970310391363\ny_acc_lr: 0.941970310391363\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Analysis: Logistic Regression does better, even with only 50% of the data.",
      "metadata": {}
    }
  ]
}